---

- name: Include installation tasks
  include: "install.debian.yml"
  tags: [mongodb]

- name: Include configuration.yml
  include: configure.yml
  tags: [mongodb]

- name: Check where admin user already exists
  command: >
    mongo --quiet {{ '--ssl --host ' + mongodb_net_ssl_host if mongodb_net_ssl_mode == 'requireSSL' else '' }} -u {{ mongodb_user_admin_name }} \
          -p {{ mongodb_user_admin_password }} --port {{ mongodb_net_port }} --eval 'db.version()' admin
  register: mongodb_user_admin_check
  changed_when: false
  check_mode: no
  ignore_errors: true
  when: ( mongodb_security_authorization == 'enabled')
  no_log: true
  tags: [mongodb]

- name: Include authorization configuration
  include: auth_initialization.yml
  when: ( mongodb_security_authorization == 'enabled'
          and mongodb_user_admin_check.rc != 0 )
  tags: [mongodb]

- name: create normal users
  mongodb_user:
    database: "{{ item.database }}"
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    update_password: "{{ mongodb_user_update_password }}"
    roles: "{{ item.roles }}"
    login_user: "{{ mongodb_user_admin_name }}"
    login_password: "{{ mongodb_user_admin_password }}"
    login_port: "{{ mongodb_net_port }}"
    login_host: "{{ mongodb_login_host|default('localhost') }}"
    ssl: "{{ True if mongodb_net_ssl_mode == 'requireSSL' else False }}"
  with_items:
    - "{{ mongodb_users | default([]) }}"
  when: ( mongodb_security_authorization == 'enabled')
  no_log: true
  tags: [mongodb]


- name: service started
  service:
    name: "{{ mongodb_daemon_name }}"
    state: started
    enabled: yes
